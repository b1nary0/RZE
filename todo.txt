@ Finished
! In Progress
* TODO

[ TODO ] 

@ Create engine class to drive initial setup
@ Create basic window
@ write basic message pump for window
@ set up include dirs to avoid "../" usage
@ probably set up a pch or some similar structure while its still easy to integrate
@ pass message to engine to shut down
@ event system to properly pass events from window message pump to rest of engine
@ Couple engine and application like this:

	-> Engine
		-> Application
	-> Engine can accept create application function
@ update loop is weird... app updates, then app updates engine? weird.
@ Actually create values for event (sub)types
@ close application with escape key
@ gonna need to make a better access point design for engine class, maybe a pass-through?
@ renderer own window? i think this is a good idea.





	
! hook up opengl
	@ set up ogl context
	@ clear buffer to non-black
	* GLEW
	* will need to think about proper hardware abstraction..  opengl contexts, etc


	
	

* event system is cumbersome and bulky. needs refactor. 
	* events themselves are extremely inextensible.
* structure InputHandler
	* naive implementation for key processing. take another look.
* awkward static setup for engine access atm
* Engine config file/config file structure
* asserts are a bit aggressive
* better understand message pump -- can avoid while (getmessage) are there ever multiple messages to resolve per frame?
* hook up better functionality to window message pump
* think about multi-threading
* verify proper additional include directory setup
* Customize window creation (borderless, fullscren, etc) easily configurable
* Set up gcc to do cross-compiler testing
