@ Finished
! In Progress
* TODO

[ TODO ] 

@ Create engine class to drive initial setup
@ Create basic window
@ write basic message pump for window
@ set up include dirs to avoid "../" usage
@ probably set up a pch or some similar structure while its still easy to integrate
@ pass message to engine to shut down
@ event system to properly pass events from window message pump to rest of engine
@ Couple engine and application like this:
	-> Engine
		-> Application
	-> Engine can accept create application function
@ update loop is weird... app updates, then app updates engine? weird.
@ Actually create values for event (sub)types
@ close application with escape key
@ gonna need to make a better access point design for engine class, maybe a pass-through?
@ renderer own window? i think this is a good idea.
@ hook up opengl
	@ set up ogl context
	@ clear buffer to non-black
@ move message pump out of winproc
@ draw triangle to screen
@ figure out this OpenGLVBO shit
@ LOG_ANNOUNCE
@ CompileMessages(), particularly near GetMessage() is causing random and massive hangs.
	-> This was being caused by GetMessage() blocking when no input, changed to PeekMessage and PM_REMOVE to solve the problem
@ Render something via ECS->Rendering loop
@ GLEW
@ use gl types in RHI
@ why is shader not work
@ matrices
@ make vector render list a queue







* there is some GPU memory shenanigans happening with multiple entities in scene....
	
	
	
	
	
* gotta clean up components and entities in world/entities etc
* whats with GLM/fwd.hpp and GLM/vec3.hpp thing? works for vec4...?
* figure out issue with include for third party in game proj
* move to 64bit?
* move opengl error checking into opengl class somehow, its ugly in other classes (see shadergroup::generate)
* LOG_CONSOLE stuff needs to be formatted properly.
	* Also, make a log class and just delegate to that instead of full on macro.. keep the macro but call log system
* Log file
* resource distribution w/ file path prefix
* definitely want to deal with the enums and not U32
* hide .c_str() from calls by taking the string and c_str() inside the func (opengl, LOG_CONSOLE stuff)
* renderer should be held by engine and loaned to game world. or game world should ask engine for it.
* find out where the additional include directory stuff is saved
* Engine.h issue with eventhandler.h needing to be before inputhandler.h
* module system for loading/unloading etc
* component filter + proper setup
* proper shutdown foundation
* organize and encapsulate entity
	@ render the entity
	* move the entity
* transform class
* is there memory leak already? wtf
* proper ownership design and cleanup of entity system/admin
* transforms
* find a good way to propogate necessary information to and from window
	-> e.g opengl context, etc
** will need to think about proper hardware abstraction..  opengl contexts, etc
* event system is cumbersome and bulky. needs refactor. 
	* events themselves are extremely inextensible.
* structure InputHandler
	* naive implementation for key processing. take another look.
* awkward static setup for engine access atm
* Engine config file/config file structure
* think about multi-threading
* verify proper additional include directory setup
* Customize window creation (borderless, fullscren, etc) easily configurable
* Set up gcc to do cross-compiler testing
